#!/usr/bin/env node

'use strict'

const parseDecimalNumber = require('parse-decimal-number')
const { includes, camelCase, reduce } = require('lodash')
const writeJsonFile = require('write-json-file')
const pAny = require('p-any')
const cheerio = require('cheerio')

const papa = require('papaparse')
const got = require('got')

// https://www.papaparse.com/docs#config
const PARSER_OPTS = {
  header: true,
  trimHeaders: true,
  dynamicTyping: true,
  skipEmptyLines: true
}

const toMap = obj =>
  reduce(
    obj,
    (acc, value, name) => {
      const key = camelCase(name)
      return {
        ...acc,
        [key]: includes(value, ',') ? parseDecimalNumber(value) : value
      }
    },
    {}
  )

const fromCSV = async () => {
  const { body } = await got('https://moz.com/top-500/download/?table=top500Domains')
  const { data } = papa.parse(body, PARSER_OPTS)
  const buffer = reduce(data, (acc, obj) => [...acc, toMap(obj)], [])
  return buffer
}

const fromURL = async () => {
  const { body } = await got('https://moz.com/top500')
  const $ = cheerio.load(body)

  const el = $('tbody tr')
    .map(function (i, el) {
      const selector = $(this)

      return {
        rank: Number(selector.find('td:nth-child(1)').text()),
        rootDomain: selector.find('td:nth-child(2)').text(),
        linkingRootDomains: parseDecimalNumber(selector.find('td:nth-child(4)').text()),
        domainAuthority: Number(selector.find('td:nth-child(5)').text())
      }
    })
    .get()

  return el
}

const main = async () => {
  const data = await pAny([fromURL(), fromCSV()])
  await writeJsonFile('top-sites.json', data)
}

main()
  .catch(err => console.error(err) && process.exit(1))
  .then(process.exit)
